foreign def puts(char[]) -> int;

layout eth
{
	src : uint(48);
	dst : uint(48);
	type : uint(16);
}

layout ipv4
{
  version_ihl : uint(8);
  dscp_ecn    : uint(8);
  len         : uint(16);
	id					: uint(16);
	fragment    : uint(16);
  ttl         : uint(8);
  protocol    : uint(8);
  checksum    : uint(16);
  src         : uint(32);
  dst         : uint(32);
}


decoder start eth_d(ethernet)
{
	extract ethernet.dst;
	extract ethernet.src;
	extract ethernet.type;
	if (ethernet.type >= 0x600)
	  	// The next header is IPv4 if the type field is 0x800.
	    match (ethernet.type) {
	      case 0x800: decode ipv4_d;
	    }
	// If its not IPv4, processing ends and the packet is
	// implicitly dropped.
}


decoder ipv4_d(ipv4)
{
	extract ipv4.version_ihl; // Needed for ihl.
	extract ipv4.src; // Extract the IP addresses.
	extract ipv4.dst;
	extract ipv4.ttl; // We need ttl to decrement.

	// Drop on expired packets.
	if (ipv4.ttl == 0) drop;
	// Proceed to the learn table after advancing by ihl
	goto learn advance (version_ihl & 0x0f) * 4;
}

event learn_ip
	requires(ipv4.src)
{
	insert
	{ ipv4.src } ->
	{
		// puts("Using learned in learn.");
		goto route;
	}
	into learn;


	insert
	[egress = in_port]
	{ ipv4.src } ->
	{
		// puts("Using learned in route.");
		set ipv4.ttl = ipv4.ttl - 1;
		output egress;
	}
	into route;
}


exact_table learn(ipv4.src)
{
  miss ->
  {
		// puts("miss");
		raise learn_ip;
    goto route;
  }
}


// This ultimately decides where to forward packets based on
// their destination IP.
exact_table routing(ipv4.dst)
	requires(ipv4.ttl)
{
	miss -> {
		// puts("flood");
		set ipv4.ttl = ipv4.ttl - 1; // Decrement ttl
		output flood; // Flood on all unlearned addresses.
	}
}
