foreign def puts(char[]) -> int;

layout eth
{
	src : uint(48);
	dst : uint(48);
	type : uint(16);
}

layout ipv4
{
  version_ihl : uint(8);
  dscp_ecn    : uint(8);
  len         : uint(16);
	id					: uint(16);
	fragment    : uint(16);
  ttl         : uint(8);
  protocol    : uint(8);
  checksum    : uint(16);
  src         : uint(32);
  dst         : uint(32);
}


decoder start eth_d(eth)
{
  extract eth.type;
  match(eth.type)
  {
    case 0x800: decode ipv4_d;
  }

	drop;
}


decoder ipv4_d(ipv4)
{
  extract ipv4.version_ihl;
	extract ipv4.ttl;
	extract ipv4.len;
  extract ipv4.src;
  extract ipv4.dst;

	if (ipv4.ttl == 0) drop;

	goto learn advance (ipv4.version_ihl & 0x0f) * 4;
}

event learn_ip
	requires(ipv4.src)
{
	insert
	{ ipv4.src } ->
	{
		// puts("Using learned in learn.");
		goto route;
	}
	into learn;


	insert
	[timeout = 1000, egress = in_port]
	{ ipv4.src } ->
	{
		// puts("Using learned in route.");
		write set ipv4.ttl = ipv4.ttl - 1;
		write output egress;
	}
	into route;
}


exact_table learn(ipv4.src)
	requires(ipv4.ttl)
{
  miss ->
  {
		// puts("miss");
		raise learn_ip;
    goto route;
  }
}


exact_table route(ipv4.dst)
	requires(ipv4.ttl)
{
  miss ->
  {
		// puts("flood");
		write set ipv4.ttl = ipv4.ttl - 1;
    flood;
  }
}
