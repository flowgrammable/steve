layout eth
{
	src : uint(48);
	dst : uint(48);
	type : uint(16);
}

layout ipv4
{
  version_ihl : uint(8);
  dscp_ecn    : uint(8);
  len         : uint(16);
	id					: uint(16);
	fragment    : uint(16);
  ttl         : uint(8);
  protocol    : uint(8);
  checksum    : uint(16);
  src         : uint(32);
  dst         : uint(32);
}

layout udp
{
  src      : uint(16);
  dst      : uint(16);
  len      : uint(16);
  checksum : uint(16);
}

exact_table t1(eth.src)
{
  { 0 }->
  { }

  { 1 }->
  { }
}

exact_table t2(eth.src, eth.dst)
{
  { 0, 0 }->
  { }

  { 0, 1 }->
  { }
}

exact_table t3(eth.src, eth.dst, eth.type)
{
  { 0, 0, 0 }->
  { }

  { 1, 2, 3 }->
  { }
}

exact_table t4(eth.dst, eth.type)
{
  { 0, 0 }->
  { }
}

// T5 and T6 may end up with the same type, though it probably doesnt matter.
exact_table t5(ipv4.id, ipv4.fragment)
{
  { 0, 0 }->
  { }
}

exact_table t6(udp.src, udp.dst)
{
  { 0, 0 }->
  { }
}

exact_table t7(ipv4.id, ipv4.fragment, ipv4.len, ipv4.src, ipv4.dst)
{
  { 0, 0, 0, 0, 0 }->
  { }
}

// INVALID
Port p1;
Port p2;
var x : int = 10;
exact_table t8(ipv4.fragment, ipv4.len, ipv4.src, ipv4.dst)
{
  { x, 0, 0, 0 }->
  { }

  { x, 0, 0, 0 }->
  { }
}

decoder start eth_d(eth)
{

}
