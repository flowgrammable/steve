foreign def puts(char[]) -> int;

layout ethernet
{
	dst : uint(48);
	src : uint(48);
	type : uint(16);
}


decoder start eth_d(ethernet)
{
	extract ethernet.dst;
	extract ethernet.src;
  goto learn;
}

// This event will do the "learning" through flow inserts.
event learn_mac
	requires(ethernet.src) // It requires the src MAC
{
	// First we insert the src of the packet
	// into the learn table so we don't keep
	// trying to learn something we already have.
	insert into learn
	{ ethernet.src } -> [timeout = 60] { goto forward; };

	// Next we insert the src of the current packet
	// into the forward table.
	//
	// The forward table matches on the dst field of a packet.
	// What we are doing is saying any packet whose dst is equal
	// to this packet's src is forwarded to this packet's
	// ingress port.
	insert into forward
	{ ethernet.src } ->
  [timeout = 60, egress = in_port]
	{
		// We set the egress property to the current
		// packet's in_port. Future packets will be forwarded to
		// the current packet's ingress port.
		output egress;
	};
}


exact_table learn(ethernet.src)
{
  miss ->
  {
		// puts("LEARN MISS");
		raise learn_mac;
    goto forward;
  }
}


exact_table forward(ethernet.dst)
{
  miss ->
  {
		// puts("Flood, miss.");
    output flood;
  }
}
