foreign def puts(c : char[]) -> int;
foreign def printf(c : char[] , i : uint) -> int;

Port p1 = 1;

layout eth
{
	src : uint(48);
	dst : uint(48);
	type : uint(16);
}

layout ipv4
{
  version_ihl : uint(8);
  dscp_ecn    : uint(8);
  len         : uint(16);
	id					: uint(16);
	fragment    : uint(16);
  ttl         : uint(8);
  protocol    : uint(8);
  checksum    : uint(16);
  src         : uint(32);
  dst         : uint(32);
}

layout ipv6
{
	flow_info : uint(32);
	payload_len : uint(16);
	next_hdr : uint(8);
	hop_limit : uint(8);
	src : uint(128);
	dst : uint(128);
}

layout udp
{
  src      : uint(16);
  dst      : uint(16);
  len      : uint(16);
  checksum : uint(16);
}


decoder start eth_d(eth)
{
  extract eth.src;
  extract eth.dst;
  extract eth.type;
  match(eth.type)
  {
    case 0x800: decode ipv4_d;
		case 0x86dd: decode ipv6_d;
  }

	drop;
}


decoder ipv4_d(ipv4)
{
	extract ipv4.ttl;
	extract ipv4.version_ihl;
	extract ipv4.dscp_ecn;
	extract ipv4.checksum;
	extract ipv4.protocol;
	extract ipv4.len;
  extract ipv4.src;
  extract ipv4.dst;

	var hdr_len : uint(8) =  (ipv4.version_ihl & 0x0f) * 4;

	// printf("0x%x\n", ipv4.protocol);

	// decode udp_d advance hdr_len;
}

decoder ipv6_d(ipv6)
{
	extract ipv6.next_hdr;
	extract ipv6.src;
	extract ipv6.dst;

	match (ipv6.next_hdr) {
		case 0x11: decode udp_d;
		case 0x3a: puts("icmpv6");
	}

	// printf("0x%x\n", ipv6.next_hdr);
}


decoder udp_d(udp)
{
	extract udp.src;
	extract udp.dst;
  extract udp.len;
	extract udp.checksum;

	printf("%d\n", udp.dst);

  // goto route;
}


exact_table route(ipv4.dst, ipv4.protocol)
	requires(ipv4.dst, ipv4.ttl)
{
	{0b0000_0000_0000_0000, 0} ->
	{
		set ipv4.ttl = ipv4.ttl - 1;
		output p1;
	}

	miss ->
	{
		drop;
	}
}
