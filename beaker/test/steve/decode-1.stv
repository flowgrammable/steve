Port p1;
Port p2;

layout eth
{
	src : int;
	dst : int;
	type : int;
}


layout ipv4
{
	src : int;
	dst : int;
	protocol: int;
}


decoder start eth_d(eth)
{
	extract eth::src;
	extract eth::dst;
	extract eth::type;

	match (eth::type) {
		case 0: decode ipv4_d;
		case 1: decode ipv4_d;
	}
}

decoder ipv4_d(ipv4)
{
	extract ipv4::dst;
	extract ipv4::protocol;

	match (ipv4::protocol) {
		case 0: goto t2;
	}
}


exact_table t1(eth::src, eth::dst, ipv4::dst, ipv4::protocol)
{
  {0, 1, 2, 3} -> { };
	{1, 2, 3, 40000} -> { };
}


exact_table t2(ipv4::dst)
{
  {0} -> {
		decode ipv4_d;
	};

	
	{32} -> {
		decode eth_d;
	};
}
